/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import EventAttributesReport from './EventAttributesReport';
import ExternalResource from './ExternalResource';
import OntologyTerm from './OntologyTerm';





/**
* The EventAttributes model module.
* @module model/EventAttributes
* @version 0.2.0
*/
export default class EventAttributes {
    /**
    * Constructs a new <code>EventAttributes</code>.
    * @alias module:model/EventAttributes
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>EventAttributes</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/EventAttributes} obj Optional instance to populate.
    * @return {module:model/EventAttributes} The populated <code>EventAttributes</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventAttributes();

            
            
            

            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('organizer')) {
                obj['organizer'] = ApiClient.convertToType(data['organizer'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('sponsor')) {
                obj['sponsor'] = ApiClient.convertToType(data['sponsor'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = ApiClient.convertToType(data['venue'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'String');
            }
            if (data.hasOwnProperty('created-at')) {
                obj['created-at'] = ApiClient.convertToType(data['created-at'], 'Date');
            }
            if (data.hasOwnProperty('updated-at')) {
                obj['updated-at'] = ApiClient.convertToType(data['updated-at'], 'Date');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('event-types')) {
                obj['event-types'] = ApiClient.convertToType(data['event-types'], ['String']);
            }
            if (data.hasOwnProperty('target-audience')) {
                obj['target-audience'] = ApiClient.convertToType(data['target-audience'], ['String']);
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('eligibility')) {
                obj['eligibility'] = ApiClient.convertToType(data['eligibility'], ['String']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('host-institutions')) {
                obj['host-institutions'] = ApiClient.convertToType(data['host-institutions'], ['String']);
            }
            if (data.hasOwnProperty('scientific-topics')) {
                obj['scientific-topics'] = ApiClient.convertToType(data['scientific-topics'], [OntologyTerm]);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [OntologyTerm]);
            }
            if (data.hasOwnProperty('external-resources')) {
                obj['external-resources'] = ApiClient.convertToType(data['external-resources'], [ExternalResource]);
            }
            if (data.hasOwnProperty('report')) {
                obj['report'] = EventAttributesReport.constructFromObject(data['report']);
            }
        }
        return obj;
    }

    /**
    * The \"friendly\" identifier of the event.
    * @member {String} slug
    */
    slug = undefined;
    /**
    * The title of the event.
    * @member {String} title
    */
    title = undefined;
    /**
    * The subtitle of the event.
    * @member {String} subtitle
    */
    subtitle = undefined;
    /**
    * The URL where the actual event can be found.
    * @member {String} url
    */
    url = undefined;
    /**
    * The organization responsible for creating the event.
    * @member {String} organizer
    */
    organizer = undefined;
    /**
    * A succinct description of what the event is about.
    * @member {String} description
    */
    description = undefined;
    /**
    * The date and time at which the event starts.
    * @member {Date} start
    */
    start = undefined;
    /**
    * The date and time at which the event ends.
    * @member {Date} end
    */
    end = undefined;
    /**
    * The person or organization that is sponsoring the event.
    * @member {String} sponsor
    */
    sponsor = undefined;
    /**
    * The name of the building where the event will be hosted.
    * @member {String} venue
    */
    venue = undefined;
    /**
    * The city the where event will be hosted.
    * @member {String} city
    */
    city = undefined;
    /**
    * The regional where county the event will be hosted.
    * @member {String} country
    */
    country = undefined;
    /**
    * The name of country where the event will be hosted.
    * @member {String} county
    */
    county = undefined;
    /**
    * The postcode of the venue hosting the event.
    * @member {String} postcode
    */
    postcode = undefined;
    /**
    * The latitude co-ordinate of the event.
    * @member {String} latitude
    */
    latitude = undefined;
    /**
    * The longitude co-ordinate of the event.
    * @member {String} longitude
    */
    longitude = undefined;
    /**
    * The date the event was first created on TeSS.
    * @member {Date} created-at
    */
    created-at = undefined;
    /**
    * The date the event was last updated on TeSS.
    * @member {Date} updated-at
    */
    updated-at = undefined;
    /**
    * A series of freetext words used to describe an event.
    * @member {Array.<String>} keywords
    */
    keywords = undefined;
    /**
    * The category of the event. This could be a meeting or a course; or if unknown or neither, an event.
    * @member {Array.<String>} event-types
    */
    event-types = undefined;
    /**
    * The intended audience of the event. This can includes things like scientific discpline and expertise level.
    * @member {Array.<String>} target-audience
    */
    target-audience = undefined;
    /**
    * The number of people allowed to attend the event.
    * @member {Number} capacity
    */
    capacity = undefined;
    /**
    * Various criteria require to participate in the event.
    * @member {Array.<String>} eligibility
    */
    eligibility = undefined;
    /**
    * The name and/or contact details of a person or institution organizing the event.
    * @member {String} contact
    */
    contact = undefined;
    /**
    * The institution physically hosting the event.
    * @member {Array.<String>} host-institutions
    */
    host-institutions = undefined;
    /**
    * The classification of the event based on the EDAM ontology's scientific topics.
    * @member {Array.<module:model/OntologyTerm>} scientific-topics
    */
    scientific-topics = undefined;
    /**
    * The classification of the event based on the EDAM ontology's operations.
    * @member {Array.<module:model/OntologyTerm>} operations
    */
    operations = undefined;
    /**
    * A list of external resources associated with this tool. These are largely tools from bio.tools, and standards, databases, and policies from biosharing.org - but can be anything.
    * @member {Array.<module:model/ExternalResource>} external-resources
    */
    external-resources = undefined;
    /**
    * @member {module:model/EventAttributesReport} report
    */
    report = undefined;








}


