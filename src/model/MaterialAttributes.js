/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalResource from './ExternalResource';
import OntologyTerm from './OntologyTerm';

/**
 * The MaterialAttributes model module.
 * @module model/MaterialAttributes
 * @version 1.3.0
 */
class MaterialAttributes {
    /**
     * Constructs a new <code>MaterialAttributes</code>.
     * @alias module:model/MaterialAttributes
     */
    constructor() { 
        
        MaterialAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MaterialAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MaterialAttributes} obj Optional instance to populate.
     * @return {module:model/MaterialAttributes} The populated <code>MaterialAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MaterialAttributes();

            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('remote-updated-date')) {
                obj['remote-updated-date'] = ApiClient.convertToType(data['remote-updated-date'], 'Date');
            }
            if (data.hasOwnProperty('remote-created-date')) {
                obj['remote-created-date'] = ApiClient.convertToType(data['remote-created-date'], 'Date');
            }
            if (data.hasOwnProperty('created-at')) {
                obj['created-at'] = ApiClient.convertToType(data['created-at'], 'Date');
            }
            if (data.hasOwnProperty('updated-at')) {
                obj['updated-at'] = ApiClient.convertToType(data['updated-at'], 'Date');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('licence')) {
                obj['licence'] = ApiClient.convertToType(data['licence'], 'String');
            }
            if (data.hasOwnProperty('difficulty-level')) {
                obj['difficulty-level'] = ApiClient.convertToType(data['difficulty-level'], 'String');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], ['String']);
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], ['String']);
            }
            if (data.hasOwnProperty('target-audience')) {
                obj['target-audience'] = ApiClient.convertToType(data['target-audience'], ['String']);
            }
            if (data.hasOwnProperty('scientific-topics')) {
                obj['scientific-topics'] = ApiClient.convertToType(data['scientific-topics'], [OntologyTerm]);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [OntologyTerm]);
            }
            if (data.hasOwnProperty('external-resources')) {
                obj['external-resources'] = ApiClient.convertToType(data['external-resources'], [ExternalResource]);
            }
            if (data.hasOwnProperty('resource-type')) {
                obj['resource-type'] = ApiClient.convertToType(data['resource-type'], ['String']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = ApiClient.convertToType(data['contact'], 'String');
            }
            if (data.hasOwnProperty('prerequisites')) {
                obj['prerequisites'] = ApiClient.convertToType(data['prerequisites'], 'String');
            }
            if (data.hasOwnProperty('syllabus')) {
                obj['syllabus'] = ApiClient.convertToType(data['syllabus'], 'String');
            }
            if (data.hasOwnProperty('learning-objectives')) {
                obj['learning-objectives'] = ApiClient.convertToType(data['learning-objectives'], 'String');
            }
            if (data.hasOwnProperty('subsets')) {
                obj['subsets'] = ApiClient.convertToType(data['subsets'], ['String']);
            }
            if (data.hasOwnProperty('date-created')) {
                obj['date-created'] = ApiClient.convertToType(data['date-created'], 'Date');
            }
            if (data.hasOwnProperty('date-modified')) {
                obj['date-modified'] = ApiClient.convertToType(data['date-modified'], 'Date');
            }
            if (data.hasOwnProperty('date-published')) {
                obj['date-published'] = ApiClient.convertToType(data['date-published'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('other-types')) {
                obj['other-types'] = ApiClient.convertToType(data['other-types'], 'String');
            }
            if (data.hasOwnProperty('last-scraped')) {
                obj['last-scraped'] = ApiClient.convertToType(data['last-scraped'], 'Date');
            }
            if (data.hasOwnProperty('scraper-record')) {
                obj['scraper-record'] = ApiClient.convertToType(data['scraper-record'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MaterialAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MaterialAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['licence'] && !(typeof data['licence'] === 'string' || data['licence'] instanceof String)) {
            throw new Error("Expected the field `licence` to be a primitive type in the JSON string but got " + data['licence']);
        }
        // ensure the json data is a string
        if (data['difficulty-level'] && !(typeof data['difficulty-level'] === 'string' || data['difficulty-level'] instanceof String)) {
            throw new Error("Expected the field `difficulty-level` to be a primitive type in the JSON string but got " + data['difficulty-level']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authors'])) {
            throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributors'])) {
            throw new Error("Expected the field `contributors` to be an array in the JSON data but got " + data['contributors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target-audience'])) {
            throw new Error("Expected the field `target-audience` to be an array in the JSON data but got " + data['target-audience']);
        }
        if (data['scientific-topics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scientific-topics'])) {
                throw new Error("Expected the field `scientific-topics` to be an array in the JSON data but got " + data['scientific-topics']);
            }
            // validate the optional field `scientific-topics` (array)
            for (const item of data['scientific-topics']) {
                OntologyTerm.validateJsonObject(item);
            };
        }
        if (data['operations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operations'])) {
                throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
            }
            // validate the optional field `operations` (array)
            for (const item of data['operations']) {
                OntologyTerm.validateJsonObject(item);
            };
        }
        if (data['external-resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['external-resources'])) {
                throw new Error("Expected the field `external-resources` to be an array in the JSON data but got " + data['external-resources']);
            }
            // validate the optional field `external-resources` (array)
            for (const item of data['external-resources']) {
                ExternalResource.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resource-type'])) {
            throw new Error("Expected the field `resource-type` to be an array in the JSON data but got " + data['resource-type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fields'])) {
            throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['contact'] && !(typeof data['contact'] === 'string' || data['contact'] instanceof String)) {
            throw new Error("Expected the field `contact` to be a primitive type in the JSON string but got " + data['contact']);
        }
        // ensure the json data is a string
        if (data['prerequisites'] && !(typeof data['prerequisites'] === 'string' || data['prerequisites'] instanceof String)) {
            throw new Error("Expected the field `prerequisites` to be a primitive type in the JSON string but got " + data['prerequisites']);
        }
        // ensure the json data is a string
        if (data['syllabus'] && !(typeof data['syllabus'] === 'string' || data['syllabus'] instanceof String)) {
            throw new Error("Expected the field `syllabus` to be a primitive type in the JSON string but got " + data['syllabus']);
        }
        // ensure the json data is a string
        if (data['learning-objectives'] && !(typeof data['learning-objectives'] === 'string' || data['learning-objectives'] instanceof String)) {
            throw new Error("Expected the field `learning-objectives` to be a primitive type in the JSON string but got " + data['learning-objectives']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subsets'])) {
            throw new Error("Expected the field `subsets` to be an array in the JSON data but got " + data['subsets']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['other-types'] && !(typeof data['other-types'] === 'string' || data['other-types'] instanceof String)) {
            throw new Error("Expected the field `other-types` to be a primitive type in the JSON string but got " + data['other-types']);
        }

        return true;
    }


}



/**
 * The \"friendly\" identifier of the material.
 * @member {String} slug
 */
MaterialAttributes.prototype['slug'] = undefined;

/**
 * The title of the material.
 * @member {String} title
 */
MaterialAttributes.prototype['title'] = undefined;

/**
 * The URL where the actual material can be found.
 * @member {String} url
 */
MaterialAttributes.prototype['url'] = undefined;

/**
 * A description of what the training material is about.
 * @member {String} description
 */
MaterialAttributes.prototype['description'] = undefined;

/**
 * The DOI of the material (if it has one).
 * @member {String} doi
 */
MaterialAttributes.prototype['doi'] = undefined;

/**
 * The date the material was last updated on its original site.
 * @member {Date} remote-updated-date
 */
MaterialAttributes.prototype['remote-updated-date'] = undefined;

/**
 * The date the material was first created on its original site.
 * @member {Date} remote-created-date
 */
MaterialAttributes.prototype['remote-created-date'] = undefined;

/**
 * The date the material was first created on TeSS.
 * @member {Date} created-at
 */
MaterialAttributes.prototype['created-at'] = undefined;

/**
 * The date the material was last updated on TeSS.
 * @member {Date} updated-at
 */
MaterialAttributes.prototype['updated-at'] = undefined;

/**
 * A list of freetext keywords to describe the material.
 * @member {Array.<String>} keywords
 */
MaterialAttributes.prototype['keywords'] = undefined;

/**
 * The licence chosen to determine how the material may be re-used.
 * @member {String} licence
 */
MaterialAttributes.prototype['licence'] = undefined;

/**
 * The difficulty level comprehension of the material requires. Can be Beginner, Intermediate, Advanced, or Not specified.
 * @member {String} difficulty-level
 */
MaterialAttributes.prototype['difficulty-level'] = undefined;

/**
 * A list of people who wrote or helped write the material.
 * @member {Array.<String>} authors
 */
MaterialAttributes.prototype['authors'] = undefined;

/**
 * Any person who was not the author but contributed in some way. Maybe they produced some software used, reviewed the paper, or helped inspire the author.
 * @member {Array.<String>} contributors
 */
MaterialAttributes.prototype['contributors'] = undefined;

/**
 * The audience the material was intended for.
 * @member {Array.<String>} target-audience
 */
MaterialAttributes.prototype['target-audience'] = undefined;

/**
 * The classification of the material based on the EDAM ontology's topics branch.
 * @member {Array.<module:model/OntologyTerm>} scientific-topics
 */
MaterialAttributes.prototype['scientific-topics'] = undefined;

/**
 * The classification of the material based on the EDAM ontology's operations branch.
 * @member {Array.<module:model/OntologyTerm>} operations
 */
MaterialAttributes.prototype['operations'] = undefined;

/**
 * A list of external resources associated with this tool. These are largely tools from bio.tools, and standards, databases, and policies from biosharing.org - but can be anything.
 * @member {Array.<module:model/ExternalResource>} external-resources
 */
MaterialAttributes.prototype['external-resources'] = undefined;

/**
 * The type(s) of this training material, e.g. Video, Poster.
 * @member {Array.<String>} resource-type
 */
MaterialAttributes.prototype['resource-type'] = undefined;

/**
 * ARDC Fields of Research codes that describe the material.
 * @member {Array.<String>} fields
 */
MaterialAttributes.prototype['fields'] = undefined;

/**
 * The current version identifier of the training material.
 * @member {String} version
 */
MaterialAttributes.prototype['version'] = undefined;

/**
 * The name and/or contact details of a person or institution responsible for this training material.
 * @member {String} contact
 */
MaterialAttributes.prototype['contact'] = undefined;

/**
 * A description of what knowledge attendees should have before accessing this training material.
 * @member {String} prerequisites
 */
MaterialAttributes.prototype['prerequisites'] = undefined;

/**
 * The syllabus of this training, or an overview of the topics covered by the training material.
 * @member {String} syllabus
 */
MaterialAttributes.prototype['syllabus'] = undefined;

/**
 * A description of what knowledge, skills, or abilities are gained from this training material.
 * @member {String} learning-objectives
 */
MaterialAttributes.prototype['learning-objectives'] = undefined;

/**
 * Identifier URLs or DOIs for each subset of the training material.
 * @member {Array.<String>} subsets
 */
MaterialAttributes.prototype['subsets'] = undefined;

/**
 * The date that the training material was created.
 * @member {Date} date-created
 */
MaterialAttributes.prototype['date-created'] = undefined;

/**
 * The date that the training material was last updated.
 * @member {Date} date-modified
 */
MaterialAttributes.prototype['date-modified'] = undefined;

/**
 * The date that the training material was published.
 * @member {Date} date-published
 */
MaterialAttributes.prototype['date-published'] = undefined;

/**
 * The status, or maturity, of the material.
 * @member {String} status
 */
MaterialAttributes.prototype['status'] = undefined;

/**
 * @member {String} other-types
 */
MaterialAttributes.prototype['other-types'] = undefined;

/**
 * The date that the training material was last harvested by TeSS.
 * @member {Date} last-scraped
 */
MaterialAttributes.prototype['last-scraped'] = undefined;

/**
 * Was this material automatically harvested (as opposed to being submitted manually)?
 * @member {Boolean} scraper-record
 */
MaterialAttributes.prototype['scraper-record'] = undefined;






export default MaterialAttributes;

