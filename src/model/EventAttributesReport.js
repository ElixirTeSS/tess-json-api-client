/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.11
 *
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.TessJsonApi) {
      root.TessJsonApi = {};
    }
    root.TessJsonApi.EventAttributesReport = factory(root.TessJsonApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The EventAttributesReport model module.
   * @module model/EventAttributesReport
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>EventAttributesReport</code>.
   * An after-the-fact report of what happened at the event. Only visible to privileged users.
   * @alias module:model/EventAttributesReport
   * @class
   */
  var exports = function() {
    var _this = this;







  };

  /**
   * Constructs a <code>EventAttributesReport</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EventAttributesReport} obj Optional instance to populate.
   * @return {module:model/EventAttributesReport} The populated <code>EventAttributesReport</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('funding')) {
        obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
      }
      if (data.hasOwnProperty('attendee_count')) {
        obj['attendee_count'] = ApiClient.convertToType(data['attendee_count'], 'Number');
      }
      if (data.hasOwnProperty('applicant_count')) {
        obj['applicant_count'] = ApiClient.convertToType(data['applicant_count'], 'Number');
      }
      if (data.hasOwnProperty('trainer_count')) {
        obj['trainer_count'] = ApiClient.convertToType(data['trainer_count'], 'Number');
      }
      if (data.hasOwnProperty('feedback')) {
        obj['feedback'] = ApiClient.convertToType(data['feedback'], 'String');
      }
      if (data.hasOwnProperty('notes')) {
        obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
      }
    }
    return obj;
  }

  /**
   * Details on who funded the event.
   * @member {String} funding
   */
  exports.prototype['funding'] = undefined;
  /**
   * The number of people who attended the event.
   * @member {Number} attendee_count
   */
  exports.prototype['attendee_count'] = undefined;
  /**
   * The number of people who applied to attend the event.
   * @member {Number} applicant_count
   */
  exports.prototype['applicant_count'] = undefined;
  /**
   * The number of trainers who were involved with the event.
   * @member {Number} trainer_count
   */
  exports.prototype['trainer_count'] = undefined;
  /**
   * Notes, or a link to feedback for the event.
   * @member {String} feedback
   */
  exports.prototype['feedback'] = undefined;
  /**
   * Miscellaneous notes on the event.
   * @member {String} notes
   */
  exports.prototype['notes'] = undefined;



  return exports;
}));


