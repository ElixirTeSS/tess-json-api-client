/*
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OntologyTerm'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OntologyTerm'));
  } else {
    // Browser globals (root is window)
    if (!root.TessJsonApi) {
      root.TessJsonApi = {};
    }
    root.TessJsonApi.WorkflowAttributes = factory(root.TessJsonApi.ApiClient, root.TessJsonApi.OntologyTerm);
  }
}(this, function(ApiClient, OntologyTerm) {
  'use strict';

  /**
   * The WorkflowAttributes model module.
   * @module model/WorkflowAttributes
   * @version 0.2.0
   */

  /**
   * Constructs a new <code>WorkflowAttributes</code>.
   * @alias module:model/WorkflowAttributes
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>WorkflowAttributes</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/WorkflowAttributes} obj Optional instance to populate.
   * @return {module:model/WorkflowAttributes} The populated <code>WorkflowAttributes</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('slug'))
        obj.slug = ApiClient.convertToType(data['slug'], 'String');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('workflow-content'))
        obj.workflowContent = ApiClient.convertToType(data['workflow-content'], Object);
      if (data.hasOwnProperty('doi'))
        obj.doi = ApiClient.convertToType(data['doi'], 'String');
      if (data.hasOwnProperty('created-at'))
        obj.createdAt = ApiClient.convertToType(data['created-at'], 'Date');
      if (data.hasOwnProperty('updated-at'))
        obj.updatedAt = ApiClient.convertToType(data['updated-at'], 'Date');
      if (data.hasOwnProperty('keywords'))
        obj.keywords = ApiClient.convertToType(data['keywords'], ['String']);
      if (data.hasOwnProperty('licence'))
        obj.licence = ApiClient.convertToType(data['licence'], 'String');
      if (data.hasOwnProperty('difficulty-level'))
        obj.difficultyLevel = ApiClient.convertToType(data['difficulty-level'], 'String');
      if (data.hasOwnProperty('authors'))
        obj.authors = ApiClient.convertToType(data['authors'], ['String']);
      if (data.hasOwnProperty('contributors'))
        obj.contributors = ApiClient.convertToType(data['contributors'], ['String']);
      if (data.hasOwnProperty('target-audience'))
        obj.targetAudience = ApiClient.convertToType(data['target-audience'], ['String']);
      if (data.hasOwnProperty('scientific-topics'))
        obj.scientificTopics = ApiClient.convertToType(data['scientific-topics'], [OntologyTerm]);
    }
    return obj;
  }

  /**
   * The \"friendly\" identifier of the workflow.
   * @member {String} slug
   */
  exports.prototype.slug = undefined;

  /**
   * The title of the workflow.
   * @member {String} title
   */
  exports.prototype.title = undefined;

  /**
   * A succinct description of what the workflow is about.
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * The cytoscape.js JSON structure describing the workflow.
   * @member {Object} workflowContent
   */
  exports.prototype.workflowContent = undefined;

  /**
   * The DOI of the workflow.
   * @member {String} doi
   */
  exports.prototype.doi = undefined;

  /**
   * The date the workflow was first created on TeSS.
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * The date the workflow was last updated on TeSS.
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * A list of freetext keywords to describe the workflow.
   * @member {Array.<String>} keywords
   */
  exports.prototype.keywords = undefined;

  /**
   * The licence chosed to determine how the workflow may be re-used.
   * @member {String} licence
   */
  exports.prototype.licence = undefined;

  /**
   * The difficulty level comprehension of the workflow requires. Can be Beginner, Intermediate, Advanced, or Not specified.
   * @member {String} difficultyLevel
   */
  exports.prototype.difficultyLevel = undefined;

  /**
   * A list of people who wrote or helped write the workflow.
   * @member {Array.<String>} authors
   */
  exports.prototype.authors = undefined;

  /**
   * Any person who was not the author but contributed in some way. Maybe they produced some software used, reviewed the paper, or helped inspire the author.
   * @member {Array.<String>} contributors
   */
  exports.prototype.contributors = undefined;

  /**
   * The audience the workflow was intended for.
   * @member {Array.<String>} targetAudience
   */
  exports.prototype.targetAudience = undefined;

  /**
   * The classification of the workflow based on the EDAM ontology's scientific topics.
   * @member {Array.<module:model/OntologyTerm>} scientificTopics
   */
  exports.prototype.scientificTopics = undefined;


  return exports;

}));
