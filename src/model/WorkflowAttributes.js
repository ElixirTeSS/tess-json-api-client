/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import OntologyTerm from './OntologyTerm';





/**
* The WorkflowAttributes model module.
* @module model/WorkflowAttributes
* @version 0.2.0
*/
export default class WorkflowAttributes {
    /**
    * Constructs a new <code>WorkflowAttributes</code>.
    * @alias module:model/WorkflowAttributes
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>WorkflowAttributes</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/WorkflowAttributes} obj Optional instance to populate.
    * @return {module:model/WorkflowAttributes} The populated <code>WorkflowAttributes</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowAttributes();

            
            
            

            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('workflow-content')) {
                obj['workflow-content'] = ApiClient.convertToType(data['workflow-content'], Object);
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('created-at')) {
                obj['created-at'] = ApiClient.convertToType(data['created-at'], 'Date');
            }
            if (data.hasOwnProperty('updated-at')) {
                obj['updated-at'] = ApiClient.convertToType(data['updated-at'], 'Date');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('licence')) {
                obj['licence'] = ApiClient.convertToType(data['licence'], 'String');
            }
            if (data.hasOwnProperty('difficulty-level')) {
                obj['difficulty-level'] = ApiClient.convertToType(data['difficulty-level'], 'String');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], ['String']);
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], ['String']);
            }
            if (data.hasOwnProperty('target-audience')) {
                obj['target-audience'] = ApiClient.convertToType(data['target-audience'], ['String']);
            }
            if (data.hasOwnProperty('scientific-topics')) {
                obj['scientific-topics'] = ApiClient.convertToType(data['scientific-topics'], [OntologyTerm]);
            }
        }
        return obj;
    }

    /**
    * The \"friendly\" identifier of the workflow.
    * @member {String} slug
    */
    slug = undefined;
    /**
    * The title of the workflow.
    * @member {String} title
    */
    title = undefined;
    /**
    * A succinct description of what the workflow is about.
    * @member {String} description
    */
    description = undefined;
    /**
    * The cytoscape.js JSON structure describing the workflow.
    * @member {Object} workflow-content
    */
    workflow-content = undefined;
    /**
    * The DOI of the workflow.
    * @member {String} doi
    */
    doi = undefined;
    /**
    * The date the workflow was first created on TeSS.
    * @member {Date} created-at
    */
    created-at = undefined;
    /**
    * The date the workflow was last updated on TeSS.
    * @member {Date} updated-at
    */
    updated-at = undefined;
    /**
    * A list of freetext keywords to describe the workflow.
    * @member {Array.<String>} keywords
    */
    keywords = undefined;
    /**
    * The licence chosed to determine how the workflow may be re-used.
    * @member {String} licence
    */
    licence = undefined;
    /**
    * The difficulty level comprehension of the workflow requires. Can be Beginner, Intermediate, Advanced, or Not specified.
    * @member {String} difficulty-level
    */
    difficulty-level = undefined;
    /**
    * A list of people who wrote or helped write the workflow.
    * @member {Array.<String>} authors
    */
    authors = undefined;
    /**
    * Any person who was not the author but contributed in some way. Maybe they produced some software used, reviewed the paper, or helped inspire the author.
    * @member {Array.<String>} contributors
    */
    contributors = undefined;
    /**
    * The audience the workflow was intended for.
    * @member {Array.<String>} target-audience
    */
    target-audience = undefined;
    /**
    * The classification of the workflow based on the EDAM ontology's scientific topics.
    * @member {Array.<module:model/OntologyTerm>} scientific-topics
    */
    scientific-topics = undefined;








}


