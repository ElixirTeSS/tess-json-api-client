/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeAttributesStaffInner from './NodeAttributesStaffInner';

/**
 * The NodeAttributes model module.
 * @module model/NodeAttributes
 * @version 1.4.0
 */
class NodeAttributes {
    /**
     * Constructs a new <code>NodeAttributes</code>.
     * @alias module:model/NodeAttributes
     * @param name {String} The name of the node.
     */
    constructor(name) { 
        
        NodeAttributes.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>NodeAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeAttributes} obj Optional instance to populate.
     * @return {module:model/NodeAttributes} The populated <code>NodeAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeAttributes();

            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('member-status')) {
                obj['member-status'] = ApiClient.convertToType(data['member-status'], 'String');
            }
            if (data.hasOwnProperty('country-code')) {
                obj['country-code'] = ApiClient.convertToType(data['country-code'], 'String');
            }
            if (data.hasOwnProperty('home-page')) {
                obj['home-page'] = ApiClient.convertToType(data['home-page'], 'String');
            }
            if (data.hasOwnProperty('staff')) {
                obj['staff'] = ApiClient.convertToType(data['staff'], [NodeAttributesStaffInner]);
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('created-at')) {
                obj['created-at'] = ApiClient.convertToType(data['created-at'], 'Date');
            }
            if (data.hasOwnProperty('updated-at')) {
                obj['updated-at'] = ApiClient.convertToType(data['updated-at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['member-status'] && !(typeof data['member-status'] === 'string' || data['member-status'] instanceof String)) {
            throw new Error("Expected the field `member-status` to be a primitive type in the JSON string but got " + data['member-status']);
        }
        // ensure the json data is a string
        if (data['country-code'] && !(typeof data['country-code'] === 'string' || data['country-code'] instanceof String)) {
            throw new Error("Expected the field `country-code` to be a primitive type in the JSON string but got " + data['country-code']);
        }
        // ensure the json data is a string
        if (data['home-page'] && !(typeof data['home-page'] === 'string' || data['home-page'] instanceof String)) {
            throw new Error("Expected the field `home-page` to be a primitive type in the JSON string but got " + data['home-page']);
        }
        if (data['staff']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staff'])) {
                throw new Error("Expected the field `staff` to be an array in the JSON data but got " + data['staff']);
            }
            // validate the optional field `staff` (array)
            for (const item of data['staff']) {
                NodeAttributesStaffInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }

        return true;
    }


}

NodeAttributes.RequiredProperties = ["name"];

/**
 * The \"friendly\" identifier of the node.
 * @member {String} slug
 */
NodeAttributes.prototype['slug'] = undefined;

/**
 * The name of the node.
 * @member {String} name
 */
NodeAttributes.prototype['name'] = undefined;

/**
 * Whether the node is a member or observer of ELIXIR.
 * @member {module:model/NodeAttributes.MemberStatusEnum} member-status
 */
NodeAttributes.prototype['member-status'] = undefined;

/**
 * The ISO 3166-1 alpha-2 code of the country this node represents.
 * @member {String} country-code
 */
NodeAttributes.prototype['country-code'] = undefined;

/**
 * A URL to the node's home page.
 * @member {String} home-page
 */
NodeAttributes.prototype['home-page'] = undefined;

/**
 * A list of staff members belonging to this node.
 * @member {Array.<module:model/NodeAttributesStaffInner>} staff
 */
NodeAttributes.prototype['staff'] = undefined;

/**
 * The node's twitter handle.
 * @member {String} twitter
 */
NodeAttributes.prototype['twitter'] = undefined;

/**
 * The date the node was first created on TeSS.
 * @member {Date} created-at
 */
NodeAttributes.prototype['created-at'] = undefined;

/**
 * The date the node was last updated on TeSS.
 * @member {Date} updated-at
 */
NodeAttributes.prototype['updated-at'] = undefined;





/**
 * Allowed values for the <code>member-status</code> property.
 * @enum {String}
 * @readonly
 */
NodeAttributes['MemberStatusEnum'] = {

    /**
     * value: "Member"
     * @const
     */
    "Member": "Member",

    /**
     * value: "Observer"
     * @const
     */
    "Observer": "Observer"
};



export default NodeAttributes;

