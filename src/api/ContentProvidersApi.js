/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 1.0.11
 *
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentProvider', 'model/ContentProviderCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentProvider'), require('../model/ContentProviderCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.TessJsonApi) {
      root.TessJsonApi = {};
    }
    root.TessJsonApi.ContentProvidersApi = factory(root.TessJsonApi.ApiClient, root.TessJsonApi.ContentProvider, root.TessJsonApi.ContentProviderCollection);
  }
}(this, function(ApiClient, ContentProvider, ContentProviderCollection) {
  'use strict';

  /**
   * ContentProviders service.
   * @module api/ContentProvidersApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ContentProvidersApi. 
   * @alias module:api/ContentProvidersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contentProvidersGet operation.
     * @callback module:api/ContentProvidersApi~contentProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentProviderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Search keywords.
     * @param {Number} opts.pageNumber The page of the collection to view. (default to 1)
     * @param {Number} opts.pageSize The number of results to return per page. (default to 30)
     * @param {module:model/String} opts.sort Sort order:  * default - sort by date (for Events), sort by number of resources (for Content Providers) otherwise sort by title (default).  * new - Sort by when the entry was created.  * mod - Sort by when the entry was last modified.  * rel - Sort by search query relevance.  * early - Sort by date, earliest to latest (Events only).  * late - Sort by date, latest to earliest (Events only). 
     * @param {Array.<String>} opts.keywords Filter by keywords.
     * @param {Array.<String>} opts.node Filter by ELIXIR node name.
     * @param {Array.<module:model/String>} opts.contentProviderType Filter by content provider type.
     * @param {module:api/ContentProvidersApi~contentProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentProviderCollection}
     */
    this.contentProvidersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
        'keywords[]': {
          value: opts['keywords'],
          collectionFormat: 'multi'
        },
        'node[]': {
          value: opts['node'],
          collectionFormat: 'multi'
        },
        'content_provider_type[]': {
          value: opts['contentProviderType'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ContentProviderCollection;

      return this.apiClient.callApi(
        '/content_providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the contentProvidersSlugGet operation.
     * @callback module:api/ContentProvidersApi~contentProvidersSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug The _slug_ id of an content provider e.g. goblet
     * @param {module:api/ContentProvidersApi~contentProvidersSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentProvider}
     */
    this.contentProvidersSlugGet = function(slug, callback) {
      var postBody = null;

      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling contentProvidersSlugGet");
      }


      var pathParams = {
        'slug': slug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/vnd.api+json'];
      var accepts = ['application/vnd.api+json'];
      var returnType = ContentProvider;

      return this.apiClient.callApi(
        '/content_providers/{slug}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
