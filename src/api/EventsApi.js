/**
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import EventCollection from '../model/EventCollection';

/**
* Events service.
* @module api/EventsApi
* @version 1.4.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventsGet operation.
     * @callback module:api/EventsApi~eventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [q] Search keywords.
     * @param {Number} [pageNumber = 1)] The page of the collection to view.
     * @param {Number} [pageSize = 30)] The number of results to return per page.
     * @param {module:model/String} [sort] Sort order:  * default - sort by date (for Events), sort by number of resources (for Content Providers) otherwise sort by title (default).  * new - Sort by when the entry was created.  * mod - Sort by when the entry was last modified.  * rel - Sort by search query relevance.  * early - Sort by date, earliest to latest (Events only).  * late - Sort by date, latest to earliest (Events only). 
     * @param {Array.<String>} [contentProvider] Filter by content provider name.
     * @param {Array.<String>} [keywords] Filter by keywords.
     * @param {Array.<String>} [node] Filter by ELIXIR node name.
     * @param {Array.<String>} [scientificTopics] Filter by scientific topics.
     * @param {Array.<String>} [operations] Filter by operations.
     * @param {Array.<String>} [targetAudience] Filter by who the intended target audience is.
     * @param {Array.<String>} [tools] Filter by what tools are involved.
     * @param {Array.<module:model/String>} [eventTypes] Filter by event type.
     * @param {Array.<String>} [city] Filter by city.
     * @param {Array.<String>} [country] Filter by country.
     * @param {Array.<String>} [venue] Filter by venue.
     * @param {Array.<String>} [organizer] Filter by organizer.
     * @param {Boolean} [online] Only show events with online access?
     * @param {Array.<String>} [sponsors] Filter by sponsor.
     * @param {Boolean} [includeExpired] Include events that have finished.
     * @param {Boolean} [includeDisabled] Include events that are disabled.
     * @param {Array.<String>} [eligibility] Filter by who is eligible to attend the event.
     * @param {Array.<String>} [language] Filter by events that will use the given language.
     * @param {Array.<String>} [collections] Filter events in a given collection (name).
     * @param {String} [start] Filter for events that occur in the given date range. Either a single YYYY-MM-DD date, or a range separated by a / e.g. 2002-05-03/2012-05-03.
     * @param {module:api/EventsApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCollection}
     */
    eventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'page_number': opts['pageNumber'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'content_provider[]': this.apiClient.buildCollectionParam(opts['contentProvider'], 'multi'),
        'keywords[]': this.apiClient.buildCollectionParam(opts['keywords'], 'multi'),
        'node[]': this.apiClient.buildCollectionParam(opts['node'], 'multi'),
        'scientific_topics[]': this.apiClient.buildCollectionParam(opts['scientificTopics'], 'multi'),
        'operations[]': this.apiClient.buildCollectionParam(opts['operations'], 'multi'),
        'target_audience[]': this.apiClient.buildCollectionParam(opts['targetAudience'], 'multi'),
        'tools[]': this.apiClient.buildCollectionParam(opts['tools'], 'multi'),
        'event_types[]': this.apiClient.buildCollectionParam(opts['eventTypes'], 'multi'),
        'city[]': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'country[]': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'venue[]': this.apiClient.buildCollectionParam(opts['venue'], 'multi'),
        'organizer[]': this.apiClient.buildCollectionParam(opts['organizer'], 'multi'),
        'online': opts['online'],
        'sponsors[]': this.apiClient.buildCollectionParam(opts['sponsors'], 'multi'),
        'include_expired': opts['includeExpired'],
        'include_disabled': opts['includeDisabled'],
        'eligibility[]': this.apiClient.buildCollectionParam(opts['eligibility'], 'multi'),
        'language[]': this.apiClient.buildCollectionParam(opts['language'], 'multi'),
        'collections[]': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = EventCollection;
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsSlugGet operation.
     * @callback module:api/EventsApi~eventsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug The _slug_ id of an event e.g. python-training-2017
     * @param {module:api/EventsApi~eventsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    eventsSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling eventsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/events/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
