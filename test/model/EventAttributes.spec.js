/*
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TessJsonApi);
  }
}(this, function(expect, TessJsonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EventAttributes', function() {
      beforeEach(function() {
        instance = new TessJsonApi.EventAttributes();
      });

      it('should create an instance of EventAttributes', function() {
        // TODO: update the code to test EventAttributes
        expect(instance).to.be.a(TessJsonApi.EventAttributes);
      });

      it('should have the property slug (base name: "slug")', function() {
        // TODO: update the code to test the property slug
        expect(instance).to.have.property('slug');
        // expect(instance.slug).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property subtitle (base name: "subtitle")', function() {
        // TODO: update the code to test the property subtitle
        expect(instance).to.have.property('subtitle');
        // expect(instance.subtitle).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property organizer (base name: "organizer")', function() {
        // TODO: update the code to test the property organizer
        expect(instance).to.have.property('organizer');
        // expect(instance.organizer).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property start (base name: "start")', function() {
        // TODO: update the code to test the property start
        expect(instance).to.have.property('start');
        // expect(instance.start).to.be(expectedValueLiteral);
      });

      it('should have the property end (base name: "end")', function() {
        // TODO: update the code to test the property end
        expect(instance).to.have.property('end');
        // expect(instance.end).to.be(expectedValueLiteral);
      });

      it('should have the property sponsor (base name: "sponsor")', function() {
        // TODO: update the code to test the property sponsor
        expect(instance).to.have.property('sponsor');
        // expect(instance.sponsor).to.be(expectedValueLiteral);
      });

      it('should have the property venue (base name: "venue")', function() {
        // TODO: update the code to test the property venue
        expect(instance).to.have.property('venue');
        // expect(instance.venue).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property county (base name: "county")', function() {
        // TODO: update the code to test the property county
        expect(instance).to.have.property('county');
        // expect(instance.county).to.be(expectedValueLiteral);
      });

      it('should have the property postcode (base name: "postcode")', function() {
        // TODO: update the code to test the property postcode
        expect(instance).to.have.property('postcode');
        // expect(instance.postcode).to.be(expectedValueLiteral);
      });

      it('should have the property latitude (base name: "latitude")', function() {
        // TODO: update the code to test the property latitude
        expect(instance).to.have.property('latitude');
        // expect(instance.latitude).to.be(expectedValueLiteral);
      });

      it('should have the property longitude (base name: "longitude")', function() {
        // TODO: update the code to test the property longitude
        expect(instance).to.have.property('longitude');
        // expect(instance.longitude).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created-at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated-at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property keywords (base name: "keywords")', function() {
        // TODO: update the code to test the property keywords
        expect(instance).to.have.property('keywords');
        // expect(instance.keywords).to.be(expectedValueLiteral);
      });

      it('should have the property eventTypes (base name: "event-types")', function() {
        // TODO: update the code to test the property eventTypes
        expect(instance).to.have.property('eventTypes');
        // expect(instance.eventTypes).to.be(expectedValueLiteral);
      });

      it('should have the property targetAudience (base name: "target-audience")', function() {
        // TODO: update the code to test the property targetAudience
        expect(instance).to.have.property('targetAudience');
        // expect(instance.targetAudience).to.be(expectedValueLiteral);
      });

      it('should have the property capacity (base name: "capacity")', function() {
        // TODO: update the code to test the property capacity
        expect(instance).to.have.property('capacity');
        // expect(instance.capacity).to.be(expectedValueLiteral);
      });

      it('should have the property eligibility (base name: "eligibility")', function() {
        // TODO: update the code to test the property eligibility
        expect(instance).to.have.property('eligibility');
        // expect(instance.eligibility).to.be(expectedValueLiteral);
      });

      it('should have the property contact (base name: "contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property hostInstitutions (base name: "host-institutions")', function() {
        // TODO: update the code to test the property hostInstitutions
        expect(instance).to.have.property('hostInstitutions');
        // expect(instance.hostInstitutions).to.be(expectedValueLiteral);
      });

      it('should have the property scientificTopics (base name: "scientific-topics")', function() {
        // TODO: update the code to test the property scientificTopics
        expect(instance).to.have.property('scientificTopics');
        // expect(instance.scientificTopics).to.be(expectedValueLiteral);
      });

      it('should have the property operations (base name: "operations")', function() {
        // TODO: update the code to test the property operations
        expect(instance).to.have.property('operations');
        // expect(instance.operations).to.be(expectedValueLiteral);
      });

      it('should have the property externalResources (base name: "external-resources")', function() {
        // TODO: update the code to test the property externalResources
        expect(instance).to.have.property('externalResources');
        // expect(instance.externalResources).to.be(expectedValueLiteral);
      });

      it('should have the property report (base name: "report")', function() {
        // TODO: update the code to test the property report
        expect(instance).to.have.property('report');
        // expect(instance.report).to.be(expectedValueLiteral);
      });

    });
  });

}));
