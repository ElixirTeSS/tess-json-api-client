/*
 * TeSS JSON-API
 * An implementation of the API for ELIXIR's TeSS, following JSON-API (http://jsonapi.org/) standards.
 *
 * OpenAPI spec version: 0.2.0
 * Contact: tess-support@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TessJsonApi);
  }
}(this, function(expect, TessJsonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TessJsonApi.WorkflowsApi();
  });

  describe('(package)', function() {
    describe('WorkflowsApi', function() {
      describe('workflowsGet', function() {
        it('should call workflowsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workflowsGet call and complete the assertions
          /*
          var opts = {};
          opts.q = "q_example";
          opts.pageNumber = 1;
          opts.pageSize = 30;
          opts.sort = "sort_example";
          opts.authors = ["authors_example"];
          opts.contributors = ["contributors_example"];
          opts.difficultyLevel = ["difficultyLevel_example"];
          opts.keywords = ["keywords_example"];
          opts.licence = ["licence_example"];
          opts.scientificTopics = ["scientificTopics_example"];
          opts.targetAudience = ["targetAudience_example"];

          instance.workflowsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TessJsonApi.WorkflowCollection);
            expect(data.errors).to.be.a(Object);
            expect(data.errors).to.be();
            expect(data.meta).to.be.a(Object);
            expect(data.meta).to.be();
            expect(data.links).to.be.a(Object);
            expect(data.links).to.be();
            expect(data.included).to.be.a(Object);
            expect(data.included).to.be();
            expect(data.jsonapi).to.be.a(Object);
            expect(data.jsonapi).to.be();
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(TessJsonApi.WorkflowResource);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.meta).to.be.a(Object);
                expect(data.meta).to.be();
                expect(data.attributes).to.be.a(TessJsonApi.WorkflowAttributes);
                      expect(data.attributes.slug).to.be.a('string');
                  expect(data.attributes.slug).to.be("");
                  expect(data.attributes.title).to.be.a('string');
                  expect(data.attributes.title).to.be("");
                  expect(data.attributes.description).to.be.a('string');
                  expect(data.attributes.description).to.be("");
                  expect(data.attributes.workflowContent).to.be.a(Object);
                  expect(data.attributes.workflowContent).to.be();
                  expect(data.attributes.doi).to.be.a('string');
                  expect(data.attributes.doi).to.be("");
                  expect(data.attributes.createdAt).to.be.a(Date);
                  expect(data.attributes.createdAt).to.be(new Date());
                  expect(data.attributes.updatedAt).to.be.a(Date);
                  expect(data.attributes.updatedAt).to.be(new Date());
                  {
                    let dataCtr = data.attributes.keywords;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.attributes.licence).to.be.a('string');
                  expect(data.attributes.licence).to.be("");
                  expect(data.attributes.difficultyLevel).to.be.a('string');
                  expect(data.attributes.difficultyLevel).to.be("");
                  {
                    let dataCtr = data.attributes.authors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.attributes.contributors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.attributes.targetAudience;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.attributes.scientificTopics;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(TessJsonApi.OntologyTerm);
                      expect(data.preferredLabel).to.be.a('string');
                      expect(data.preferredLabel).to.be("");
                      expect(data.uri).to.be.a('string');
                      expect(data.uri).to.be("");
      
                            }
                  }
                expect(data.relationships).to.be.a(Object);
                expect(data.relationships).to.be();
                expect(data.links).to.be.a(Object);
                expect(data.links).to.be();

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('workflowsSlugGet', function() {
        it('should call workflowsSlugGet successfully', function(done) {
          // TODO: uncomment, update parameter values for workflowsSlugGet call and complete the assertions
          /*
          var slug = "slug_example";

          instance.workflowsSlugGet(slug, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TessJsonApi.Workflow);
            expect(data.errors).to.be.a(Object);
            expect(data.errors).to.be();
            expect(data.meta).to.be.a(Object);
            expect(data.meta).to.be();
            expect(data.links).to.be.a(Object);
            expect(data.links).to.be();
            expect(data.included).to.be.a(Object);
            expect(data.included).to.be();
            expect(data.jsonapi).to.be.a(Object);
            expect(data.jsonapi).to.be();
            expect(data.data).to.be.a(TessJsonApi.WorkflowResource);
                  expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("");
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("");
              expect(data.data.meta).to.be.a(Object);
              expect(data.data.meta).to.be();
              expect(data.data.attributes).to.be.a(TessJsonApi.WorkflowAttributes);
                    expect(data.data.attributes.slug).to.be.a('string');
                expect(data.data.attributes.slug).to.be("");
                expect(data.data.attributes.title).to.be.a('string');
                expect(data.data.attributes.title).to.be("");
                expect(data.data.attributes.description).to.be.a('string');
                expect(data.data.attributes.description).to.be("");
                expect(data.data.attributes.workflowContent).to.be.a(Object);
                expect(data.data.attributes.workflowContent).to.be();
                expect(data.data.attributes.doi).to.be.a('string');
                expect(data.data.attributes.doi).to.be("");
                expect(data.data.attributes.createdAt).to.be.a(Date);
                expect(data.data.attributes.createdAt).to.be(new Date());
                expect(data.data.attributes.updatedAt).to.be.a(Date);
                expect(data.data.attributes.updatedAt).to.be(new Date());
                {
                  let dataCtr = data.data.attributes.keywords;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.attributes.licence).to.be.a('string');
                expect(data.data.attributes.licence).to.be("");
                expect(data.data.attributes.difficultyLevel).to.be.a('string');
                expect(data.data.attributes.difficultyLevel).to.be("");
                {
                  let dataCtr = data.data.attributes.authors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.attributes.contributors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.attributes.targetAudience;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.attributes.scientificTopics;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(TessJsonApi.OntologyTerm);
                    expect(data.preferredLabel).to.be.a('string');
                    expect(data.preferredLabel).to.be("");
                    expect(data.uri).to.be.a('string');
                    expect(data.uri).to.be("");
    
                          }
                }
              expect(data.data.relationships).to.be.a(Object);
              expect(data.data.relationships).to.be();
              expect(data.data.links).to.be.a(Object);
              expect(data.data.links).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
